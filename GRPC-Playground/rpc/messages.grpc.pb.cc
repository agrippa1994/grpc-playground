// Generated by the gRPC protobuf plugin.
// If you make any local change, they will be lost.
// source: messages.proto

#include "messages.pb.h"
#include "messages.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace Messages {

static const char* IPC_method_names[] = {
  "/Messages.IPC/Init",
};

std::unique_ptr< IPC::Stub> IPC::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< IPC::Stub> stub(new IPC::Stub(channel));
  return stub;
}

IPC::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Init_(IPC_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status IPC::Stub::Init(::grpc::ClientContext* context, const ::Messages::InitRequest& request, ::Messages::InitReply* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Init_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::Messages::InitReply>* IPC::Stub::AsyncInitRaw(::grpc::ClientContext* context, const ::Messages::InitRequest& request, ::grpc::CompletionQueue* cq) {
  return new ::grpc::ClientAsyncResponseReader< ::Messages::InitReply>(channel_.get(), cq, rpcmethod_Init_, context, request);
}

IPC::Service::Service() {
  (void)IPC_method_names;
  AddMethod(new ::grpc::RpcServiceMethod(
      IPC_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< IPC::Service, ::Messages::InitRequest, ::Messages::InitReply>(
          std::mem_fn(&IPC::Service::Init), this)));
}

IPC::Service::~Service() {
}

::grpc::Status IPC::Service::Init(::grpc::ServerContext* context, const ::Messages::InitRequest* request, ::Messages::InitReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace Messages

